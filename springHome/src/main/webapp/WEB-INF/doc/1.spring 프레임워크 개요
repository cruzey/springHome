EJB -> 개선 -> Spring

open source

컨테이너 역할
자바 객체의 라이프사이클을 관리

DI지원
설정파일, 어노테이션으로 객체간 의존관계 설정

AOP지원
공통모듈을 분리적용가능

POJO지원
스프링 컨테이너에 저장되는 객체는 클래스나 인터페이스를 상속받지 않아도 된다

트랜젝션 처리를 위한 일관된 방법을 지원

영속성과 관련된 다양한 API지원
ORM프레임워크들과의 연동

spring을 사용하기 위해 maven build가 필요
maven : 자바 개발의 사실상 표준 빌드 툴

xml설정 파일을 사용
groovy라는 언어로 설정하는 gradle이 등장

의존성 관리 자동 수행
maven 중앙 저장소 제공 -> 자바 라이브러리 생태계 조성

POM.xml : 메이븐의 메인 설정파일
root에 위치

메이븐 프로젝트 설정시 필수
프로젝트명 -> arifact id로 사용

그룹아이디
조직, 기관의 도메인 역순으로 표기

version
release
snapshot

web project dir 구조

src
모든 java 파일 위치

build/classes
컴파일된 .class파일 위치

webcontent
html, css, js, jsp, 이미지 파일등

webcontent/web-inf
웹 어플리케이션의 설정과 관련된 파일 위치
클라이언트에게 하이딩 되어있다

webcontent/web-inf/lib
자바 아카이브 파일 위치

IoC(inversion of control)
객체에 대한 제어권을 프레임워크가 갖는다

컴포넌트 의존관계 결정 설정 및 생명주기를 해결하기 위한
디자인 패턴

IoC컨테이너
스프링 프레임워크도 객체에 대한 생성 및 생명주기를 관리할 수
있는 기능 제공
POJO의 생성, 초기화, 서비스, 소멸에 대한 권한을 가진다

dependancy injection
각 클래스간의 의존관계를 빈 설정 정보를 바탕으로 컨테이너가 자동 연결해주는것

bean
스프링 컨테이너에 의해 관리되는 객체
스프링 설정 파일에 등록되어 사용

spring container
빈이 모여있는 곳

빈을 자동으로 관리해 주는 IoC기능이 스프링의 핵심 중 하나

MVC
비지니스 로직과 프레젠테이션 로직의 구분을 위해 사용

Model : application의 정보 (data, business logic 포함)
View : client에게 제공되는 화면
Controller : 두 층 사이의 상호작용 관리
client의 요청에 따라 필요한 업무를 수행할 model 컴포넌트를 호출
client에게서 받은 data가 있을 때 이를 model에 전달하기 위해 가공
model이 일을 마치면 그 결과를 view에 전달 

front controller : 인증이나 권한과 같은 공통적으로 처리해야 하는
로직이 있을 경우 사용

Spring MVC의 구성요소
DispatcherServlet
클라이언트의 요청을 받아서 Controller에게 전달하고
리턴한 결과값을 view에게 전달하여 알맞은 응답 생성

HandlerMapping
URL과 요청정보를 기준으로 어떤 핸들러 객체를 사용할지 결정

Controller
클라이언트의 요청을 처리한 뒤, model을 호출하고 그 결과를
DispatcherServlet에게 알려줌

ModelAndView
Controller의 처리한 데이터 및 화면에 대한 정보를 보유한 객체

View
Controller의 처리결과 화면에 대한 정보를 보유한 객체

ViewResolver
Controller가 리턴한 뷰 이름을 기반으로 Controller 처리결과를 
생성할 뷰를 겨정